// This file is auto-generated, don't edit it. Thanks.
package com.aliyun.sdk.service.sas20181203.models;

import com.aliyun.core.annotation.*;
import darabonba.core.RequestModel;
import darabonba.core.TeaModel;
import com.aliyun.sdk.gateway.pop.models.*;

/**
 * {@link DescribeNoticeConfigResponseBody} extends {@link TeaModel}
 *
 * <p>DescribeNoticeConfigResponseBody</p>
 */
public class DescribeNoticeConfigResponseBody extends TeaModel {
    @NameInMap("NoticeConfigList")
    private java.util.List < NoticeConfigList> noticeConfigList;

    @NameInMap("RequestId")
    private String requestId;

    private DescribeNoticeConfigResponseBody(Builder builder) {
        this.noticeConfigList = builder.noticeConfigList;
        this.requestId = builder.requestId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static DescribeNoticeConfigResponseBody create() {
        return builder().build();
    }

    /**
     * @return noticeConfigList
     */
    public java.util.List < NoticeConfigList> getNoticeConfigList() {
        return this.noticeConfigList;
    }

    /**
     * @return requestId
     */
    public String getRequestId() {
        return this.requestId;
    }

    public static final class Builder {
        private java.util.List < NoticeConfigList> noticeConfigList; 
        private String requestId; 

        /**
         * An array that consists of the notification settings.
         */
        public Builder noticeConfigList(java.util.List < NoticeConfigList> noticeConfigList) {
            this.noticeConfigList = noticeConfigList;
            return this;
        }

        /**
         * The ID of the request, which is used to locate and troubleshoot issues.
         */
        public Builder requestId(String requestId) {
            this.requestId = requestId;
            return this;
        }

        public DescribeNoticeConfigResponseBody build() {
            return new DescribeNoticeConfigResponseBody(this);
        } 

    } 

    public static class NoticeConfigList extends TeaModel {
        @NameInMap("AliUid")
        private Long aliUid;

        @NameInMap("CurrentPage")
        private Integer currentPage;

        @NameInMap("Project")
        private String project;

        @NameInMap("Route")
        private Integer route;

        @NameInMap("TimeLimit")
        private Integer timeLimit;

        private NoticeConfigList(Builder builder) {
            this.aliUid = builder.aliUid;
            this.currentPage = builder.currentPage;
            this.project = builder.project;
            this.route = builder.route;
            this.timeLimit = builder.timeLimit;
        }

        public static Builder builder() {
            return new Builder();
        }

        public static NoticeConfigList create() {
            return builder().build();
        }

        /**
         * @return aliUid
         */
        public Long getAliUid() {
            return this.aliUid;
        }

        /**
         * @return currentPage
         */
        public Integer getCurrentPage() {
            return this.currentPage;
        }

        /**
         * @return project
         */
        public String getProject() {
            return this.project;
        }

        /**
         * @return route
         */
        public Integer getRoute() {
            return this.route;
        }

        /**
         * @return timeLimit
         */
        public Integer getTimeLimit() {
            return this.timeLimit;
        }

        public static final class Builder {
            private Long aliUid; 
            private Integer currentPage; 
            private String project; 
            private Integer route; 
            private Integer timeLimit; 

            /**
             * The ID of the user.
             */
            public Builder aliUid(Long aliUid) {
                this.aliUid = aliUid;
                return this;
            }

            /**
             * The number of the page to return.
             */
            public Builder currentPage(Integer currentPage) {
                this.currentPage = currentPage;
                return this;
            }

            /**
             * The identifier of the notification item. Valid values:
             * <p>
             * 
             * *   **yundun\_security_Weekreport**: notification for unhandled vulnerabilities.
             * *   **yundun\_sas\_antiransomware_task**: notification for results of restoration tasks.
             * *   **sas_healthcheck**: notification for baseline checks.
             * *   **sas_suspicious**: notification for alerts generated by Security Center.
             * *   **yundun\_aegis\_AV_true**: notification for precision defense.
             * *   **yundun\_sas\_ak_leakage**: notification for AccessKey pair leaks.
             * *   **yundun\_sas\_config_alert**: notification for configuration assessment.
             * *   **yundun\_sas\_vul_Emergency**: notification for urgent vulnerabilities.
             * *   **yundun\_webguard_event**: notification for web tamper proofing.
             * *   **yundun\_sas\_cloud\_native_firewall**: notification for alerts generated by the container firewall feature.
             * *   **yundun\_sas\_cloud\_native\_firewall_Defense**: notification for proactive defense implemented by the container firewall feature.
             * *   **yundun\_IP_Blocking**: notification for blocked brute-force attacks initiated from malicious IP addresses.
             * *   **yundun\_sas\_anti\_virus_config**: notification for virus scan.
             * *   **yundun\_sas_log**: notification for excess logs.
             * *   **yundun\_honeypot_alarm**: notification for alerts generated by the honeypot feature.
             * *   **aliyun\_rasp_alarm**: notification for alerts generated by the application security feature.
             * *   **virusScheduleTask**: notification for completion of scheduled virus scans.
             * *   **yundun\_anti_Virus**: notification that no security checks are performed.
             * *   **sas_vulnerability**: notification for vulnerabilities.
             * *   **weeklyreport**: notification for weekly reports.
             * *   **agent**: notification that the Security Center agent is offline.
             * *   **bruteforcesuccess**: notification for protection against brute-force attacks.
             * *   **webshell**: notification for webshells.
             * *   **suspicious**: notification for alerts generated by Server Guard.
             * *   **patch**: deprecated.
             * *   **remotelogin**: notification for remote logons.
             * *   **health**: notification for security checks.
             * *   **yundun\_sas\_cloudsiem_log**: notification of insufficient threat analysis log capacity.
             * >  If the value is **yundun\_security_Weekreport**, weekly reports are sent to notify you of unhandled vulnerabilities.
             */
            public Builder project(String project) {
                this.project = project;
                return this;
            }

            /**
             * The notification method. Valid values:
             * <p>
             * 
             * *   **1**: text message
             * *   **2**: email
             * *   **4**: internal message
             * *   **3**: text message and email
             * *   **5**: text message and internal message
             * *   **6**: email and internal message
             * *   **7**: text message, email, and internal message
             */
            public Builder route(Integer route) {
                this.route = route;
                return this;
            }

            /**
             * The time period during which Security Center sends notifications. Valid values:
             * <p>
             * 
             * *   **0**: any time
             * *   **1**: 08:00 to 22:00
             */
            public Builder timeLimit(Integer timeLimit) {
                this.timeLimit = timeLimit;
                return this;
            }

            public NoticeConfigList build() {
                return new NoticeConfigList(this);
            } 

        } 

    }
}
